"use client";
import Head from "next/head";
import { Inter } from "next/font/google";
import { Link } from "@chakra-ui/next-js";
import { ammoData } from "@/util/ammoData";
import {
  Center,
  VStack,
  Text,
  Box,
  AccordionItem,
  Accordion,
  Input,
} from "@chakra-ui/react";
import { useState } from "react";
import DesktopRow from "@/components/DesktopRow";

const inter = Inter({ subsets: ["latin"] });

export const getColorNumbers = (value: number | string, inverse: boolean) => {
  if (value === "") {
    return;
  }

  const tmpValue = inverse ? -Number(value) : Number(value);

  if (tmpValue > 0) {
    return "#4cf057";
  } else if (tmpValue < 0) {
    return "#cf0b04";
  } else if (tmpValue === 0) {
    return "red.300";
  }
};

export const getColor = (value: string | number) => {
  if (value === 0) {
    return "gray.300";
  }
  if (!value) {
    return "";
  }

  // return green color if value contains '+'
  if (value === "") {
    return "vulcan.900";
  }

  // if value contains the character '+', return green
  if (value?.toString().includes("+")) {
    return "#4cf057";
  } else if (value?.toString().includes("-")) {
    return "#cf0b04";
  }
  if (value?.toString().toLowerCase().includes("medium")) {
    return "orange";
  }
  if (value?.toString().toLowerCase().includes("low")) {
    return "#cf0b04";
  }
  if (value?.toString().toLowerCase().includes("high")) {
    return "#4cf057";
  }

  return "tarkovYellow.100";
};

export default function Home() {
  const tmp = ammoData;
  const [searchQuery, setSearchQuery] = useState("");

  // Filter ammoData based on search query
  const filteredAmmoData = tmp.filter(
    (ammo) =>
      ammo.Caliber.toLowerCase().includes(searchQuery.toLowerCase()) ||
      ammo.Name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  // group ammoData by Caliber
  const calibers = filteredAmmoData.reduce((acc: any, ammo: any) => {
    if (!acc[ammo.Caliber]) {
      acc[ammo.Caliber] = [];
    }
    acc[ammo.Caliber].push(ammo);
    return acc;
  }, {});

  let maxCellHeight = "48px";

  // count keys in ammoByCaliber
  const keysFilteredByWeaponName = Object.keys(calibers);

  const [expandedItems, setExpandedIndexes] = useState([
    ...Array(keysFilteredByWeaponName.length).keys(),
  ]);

  return (
    <>
      <Head>
        <title>ABI Ammo</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${inter.className}`}>
        <Box pt="48px">
          <Center pb="48px">
            <VStack>
              <Text
                textAlign="center"
                color="tarkovYellow.100"
                fontWeight="bold"
                fontSize={["xl", "4xl"]}
                mt="24px"
                as="h1"
              >
                Arena Breakout Infinite - Ammo and Armor Charts
              </Text>
              <Text
                color="red.600"
                fontSize="md"
                textAlign="center"
                fontWeight="bold"
              >
                v0.x (Updated on 2024/05/15) | created by{" "}
                <Link
                  href="https://www.eft-ammo.com"
                  isExternal
                  textDecoration={"underline"}
                  fontSize={14}
                >
                  EFT-AMMO
                </Link>
              </Text>
            </VStack>
          </Center>
        </Box>
        <Center>
          <VStack>
            <Input
              type="text"
              placeholder="Search by caliber or ammo name..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              maxW={"780px"}
              borderRadius={"none"}
              bg={"vulcan.900"}
              color={"tarkovYellow.100"}
              fontWeight={"semibold"}
              borderColor={"vulcan.900"}
              _placeholder={{ color: "tarkovYellow.100", textAlign: "center" }}
              mb={4}
            />
            <Accordion
              textAlign="center"
              defaultIndex={expandedItems}
              index={expandedItems}
              allowMultiple
              allowToggle
              reduceMotion={true}
              onChange={(expandedIndexes: number[]) => {
                setExpandedIndexes(expandedIndexes);
              }}
              w={["100%"]}
            >
              <VStack>
                {Object.keys(calibers).map((caliber, index) => {
                  return (
                    <Box
                      key={`allAmmos-${index}`}
                      color="tarkovYellow.100"
                      mx="24px"
                      rounded="sm"
                      border="6px solid"
                      borderColor="vulcan.900"
                      w="100%"
                    >
                      <AccordionItem border="none" w="100%" key={caliber}>
                        <DesktopRow
                          ammos={calibers[caliber]}
                          caliber={caliber}
                          maxCellHeight={maxCellHeight}
                        />
                      </AccordionItem>
                    </Box>
                  );
                })}
              </VStack>
            </Accordion>
          </VStack>
        </Center>
      </main>
    </>
  );
}
